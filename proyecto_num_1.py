# -*- coding: utf-8 -*-
"""PROYECTO_NUM_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ujcDe1-JgbcmBTOzW01SS5w0yJyFzUPI
"""

# Martínez Garduño Regina
# ¿Qué se importó?
import numpy as np
import pandas as pd
from google.colab import drive

# Definimos nuestras clases
class Grafica:
    """Esto es una gráfica:)."""
    def __init__(self, nodos, arcos):
        self.matriz = np.zeros((len(nodos), len(nodos)))
        for x in arcos:
            self.matriz[x[0], x[1]] = 1

    def __str__(self):
        return str(self.matriz)

class Red(Grafica):
    """Esto es una clase grafica, la cual heredará la clase grafica:)."""
    def __init__(self, nodos, arcos):
        super().__init__(nodos, arcos)
        self.matriz_probabilidades = np.zeros_like(self.matriz)

    def calcular_matriz_probabilidades(self):
        for i in range(len(self.matriz)):
            suma = self.matriz[i, :].sum()
            if suma > 0:
                self.matriz_probabilidades[i, :] = self.matriz[i, :] / suma
            else:
                self.matriz_probabilidades[i, :] = np.zeros(len(self.matriz))

    def calcular_pagerank(self, d=0.85, tol=1e-6):
        """Aquí se calculará el PangeRank utilizando el "damping factor". """
        n = len(self.matriz)
        self.calcular_matriz_probabilidades()
        U = np.ones((n, n)) / n
        P = d * self.matriz_probabilidades + (1 - d) * U
        pi = np.ones((1, n)) / n
        pi_1 = pi @ P

        while np.linalg.norm(pi - pi_1) > tol:
            pi = pi_1
            pi_1 = pi @ P

        return pi_1.flatten()

    def calcular_pagerank_ru(self, indices_ru, d=0.85, tol=1e-6, max_iter=100):
        """Ahora, se calculará el PageRank PERO de las pagínas con terminación .ru"""
        n = len(self.matriz)
        if self.matriz_probabilidades is None:
            self.calcular_matriz_probabilidades()

        matriz_uniforme = np.ones((n, n)) / n
        matriz_transicion = d * self.matriz_probabilidades + (1 - d) * matriz_uniforme
        pagerank = np.zeros(n)
        for idx in indices_ru:
            pagerank[idx] = 1 / len(indices_ru)
        for _ in range(max_iter):
            nuevo_pagerank = matriz_transicion.T @ pagerank
            if np.linalg.norm(nuevo_pagerank - pagerank, 1) < tol:
                return nuevo_pagerank
            pagerank = nuevo_pagerank

        return pagerank

def crear_red_desde_excel(ruta_archivo):
    """Construirá un objeto Red, dado un archivo de Excel"""
    datos = pd.read_excel(ruta_archivo)
    nodos = list(datos["Index"] - 1)  # Convertir índices a base 0
    enlaces = []
    for idx, fila in datos.iterrows():
        citados = str(fila["Cited by"]).split(',')
        for citado in citados:
            citado = citado.strip()
            if citado.isdigit():
                enlaces.append((int(citado) - 1, idx))  # Base 0 para ambos índices

    return Red(nodos, enlaces), datos

# Una vez definidas nuestras clases, pasamos a implementar un  "__main__"
if __name__ == "__main__":
    # Google Drive
    drive.mount('/content/drive', force_remount=True)
    ruta_excel = "/content/drive/MyDrive/Web.xlsx"

    red, df = crear_red_desde_excel(ruta_excel)

   # Finalmente, responderemos las preguntas
 # Pregunta I: ¿Cuál es la página web más importante...?
    pagerank_resultado = red.calcular_pagerank()
    pagina_importante = np.argmax(pagerank_resultado) + 1

    print("Resultados de PageRank estándar (Pregunta 1):", pagerank_resultado)
    print("Página más importante (Pregunta 1):", pagina_importante)

    # Pregunta II: Defina ahora un vector π el cúal tendrá la terminación .ru
if "Website" in df.columns:
    indices_ru = [
        i for i, url in enumerate(df["Website"])
        if isinstance(url, str) and url.lower().strip().endswith(".ru")
    ]

    if indices_ru:
        try:
            pagerank_ru_resultado = red.calcular_pagerank_ru(indices_ru)
            pagina_importante_ru = np.argmax(pagerank_ru_resultado) + 1
            print("\nResultados de PageRank con páginas .ru (Pregunta 2):", pagerank_ru_resultado)
            print("Página más importante con .ru (Pregunta 2):", pagina_importante_ru)
        except Exception as e:
            print("\nError al calcular el PageRank para páginas .ru:", str(e))
    else:
        print("\nNo se encontraron páginas con terminación '.ru' en los datos proporcionados (Pregunta 2).")
else:
    print("\nError: La columna 'Website' no existe en los datos (Pregunta 2).")


# Pregunta III: Utilice los valores 0.5,0.85,1 para d, calcular el PageRank
valores_d = [0.5, 0.85, 1.0]  # Valores d
print("\nResultados para diferentes valores de d (Pregunta 3):")

for d in valores_d:
    try:
        pagerank_modificado = red.calcular_pagerank(d=d)
        pagina_importante = np.argmax(pagerank_modificado) + 1
        print(f"\nDamping factor (d) = {d}:")
        print("Vector de PageRank:", pagerank_modificado)
        print("Página más importante:", pagina_importante)
    except Exception as e:

        print(f"\nError al calcular PageRank con d = {d}: {str(e)}")